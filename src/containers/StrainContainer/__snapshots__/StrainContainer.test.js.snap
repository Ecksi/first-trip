// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StrainContainer component should match the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StrainContainer
    addEffects={[Function]}
    addStrains={[Function]}
    effects={
        Object {
            "type": Object {
              "positive": "happy",
            },
          }
    }
    filters={
        Array [
            "happy",
          ]
    }
    name="weed"
    race="sativa"
    resetFilter={[Function]}
    results={
        Array [
            Object {
              "name": "weedTwo",
            },
          ]
    }
    searchByFilters={[Function]}
    searchResults={[Function]}
    strains={
        Array [
            Object {
              "name": "weed",
            },
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Hello there 
</h1>,
        <h3>
          Select the effects you would like to have or avoid:
</h3>,
        <div
          className="effects"
>
          <h2>
                    Positive Effects
          </h2>
          <h2>
                    Medical Effects
          </h2>
          <h2>
                    Negative Effects
          </h2>
</div>,
        <div
          className="effects"
>
          <ul />
          <ul />
          <ul />
</div>,
        <div
          className="effects"
>
          <NavLink
                    activeClassName="active"
                    ariaCurrent="true"
                    to="/results"
          >
                    <button
                              className="filter"
                              name="positive"
                              onClick={[Function]}
                    >
                              Filter by Positive
                    </button>
                    <button
                              className="filter"
                              name="medical"
                              onClick={[Function]}
                    >
                              Filter by Medical
                    </button>
                    <button
                              className="filter"
                              name="negative"
                              onClick={[Function]}
                    >
                              Filter by Negative
                    </button>
          </NavLink>
</div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Hello there ",
        },
        "ref": null,
        "rendered": "Hello there ",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Select the effects you would like to have or avoid:",
        },
        "ref": null,
        "rendered": "Select the effects you would like to have or avoid:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h2>
              Positive Effects
</h2>,
            <h2>
              Medical Effects
</h2>,
            <h2>
              Negative Effects
</h2>,
          ],
          "className": "effects",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Positive Effects",
            },
            "ref": null,
            "rendered": "Positive Effects",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Medical Effects",
            },
            "ref": null,
            "rendered": "Medical Effects",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Negative Effects",
            },
            "ref": null,
            "rendered": "Negative Effects",
            "type": "h2",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <ul />,
            <ul />,
            <ul />,
          ],
          "className": "effects",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "ul",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "ul",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "ul",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <NavLink
            activeClassName="active"
            ariaCurrent="true"
            to="/results"
>
            <button
                        className="filter"
                        name="positive"
                        onClick={[Function]}
            >
                        Filter by Positive
            </button>
            <button
                        className="filter"
                        name="medical"
                        onClick={[Function]}
            >
                        Filter by Medical
            </button>
            <button
                        className="filter"
                        name="negative"
                        onClick={[Function]}
            >
                        Filter by Negative
            </button>
</NavLink>,
          "className": "effects",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "ariaCurrent": "true",
            "children": Array [
              <button
                className="filter"
                name="positive"
                onClick={[Function]}
>
                Filter by Positive
</button>,
              <button
                className="filter"
                name="medical"
                onClick={[Function]}
>
                Filter by Medical
</button>,
              <button
                className="filter"
                name="negative"
                onClick={[Function]}
>
                Filter by Negative
</button>,
            ],
            "to": "/results",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Filter by Positive",
                "className": "filter",
                "name": "positive",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Filter by Positive",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Filter by Medical",
                "className": "filter",
                "name": "medical",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Filter by Medical",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Filter by Negative",
                "className": "filter",
                "name": "negative",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Filter by Negative",
              "type": "button",
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Hello there 
</h1>,
          <h3>
            Select the effects you would like to have or avoid:
</h3>,
          <div
            className="effects"
>
            <h2>
                        Positive Effects
            </h2>
            <h2>
                        Medical Effects
            </h2>
            <h2>
                        Negative Effects
            </h2>
</div>,
          <div
            className="effects"
>
            <ul />
            <ul />
            <ul />
</div>,
          <div
            className="effects"
>
            <NavLink
                        activeClassName="active"
                        ariaCurrent="true"
                        to="/results"
            >
                        <button
                                    className="filter"
                                    name="positive"
                                    onClick={[Function]}
                        >
                                    Filter by Positive
                        </button>
                        <button
                                    className="filter"
                                    name="medical"
                                    onClick={[Function]}
                        >
                                    Filter by Medical
                        </button>
                        <button
                                    className="filter"
                                    name="negative"
                                    onClick={[Function]}
                        >
                                    Filter by Negative
                        </button>
            </NavLink>
</div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Hello there ",
          },
          "ref": null,
          "rendered": "Hello there ",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Select the effects you would like to have or avoid:",
          },
          "ref": null,
          "rendered": "Select the effects you would like to have or avoid:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                Positive Effects
</h2>,
              <h2>
                Medical Effects
</h2>,
              <h2>
                Negative Effects
</h2>,
            ],
            "className": "effects",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Positive Effects",
              },
              "ref": null,
              "rendered": "Positive Effects",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Medical Effects",
              },
              "ref": null,
              "rendered": "Medical Effects",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Negative Effects",
              },
              "ref": null,
              "rendered": "Negative Effects",
              "type": "h2",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <ul />,
              <ul />,
              <ul />,
            ],
            "className": "effects",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "ul",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "ul",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "ul",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <NavLink
              activeClassName="active"
              ariaCurrent="true"
              to="/results"
>
              <button
                            className="filter"
                            name="positive"
                            onClick={[Function]}
              >
                            Filter by Positive
              </button>
              <button
                            className="filter"
                            name="medical"
                            onClick={[Function]}
              >
                            Filter by Medical
              </button>
              <button
                            className="filter"
                            name="negative"
                            onClick={[Function]}
              >
                            Filter by Negative
              </button>
</NavLink>,
            "className": "effects",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "activeClassName": "active",
              "ariaCurrent": "true",
              "children": Array [
                <button
                  className="filter"
                  name="positive"
                  onClick={[Function]}
>
                  Filter by Positive
</button>,
                <button
                  className="filter"
                  name="medical"
                  onClick={[Function]}
>
                  Filter by Medical
</button>,
                <button
                  className="filter"
                  name="negative"
                  onClick={[Function]}
>
                  Filter by Negative
</button>,
              ],
              "to": "/results",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Filter by Positive",
                  "className": "filter",
                  "name": "positive",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Filter by Positive",
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Filter by Medical",
                  "className": "filter",
                  "name": "medical",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Filter by Medical",
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Filter by Negative",
                  "className": "filter",
                  "name": "negative",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Filter by Negative",
                "type": "button",
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
